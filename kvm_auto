#!/bin/bash
# BSD 3-Clause License
# 
# Copyright (c) 2018, SÃ©bastien Huss
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

OUT_level=${OUT_level:-NOTICE}
BASE_dir=${BASE_dir:-"$(cd "$(dirname $0)";pwd)"}
LOG_level=NONE
SHLIBDIR=${SHLIBDIR:-"${BASE_dir}/bashlibs"}
. $SHLIBDIR/core.lib.bash
. $SHLIBDIR/task.lib.bash

TEMPLATE_DIR=${TEMPLATE_DIR:-"${BASE_dir}/templates"}

ARGS_info="kvm_auto: Create debian VMs on a debian host with libvirt/KVM"
MP=${MP:-"/tmp/images/default"}
DISK=${DISK:-"/dev/nbd0"}
FILE=${FILE:-"$(pwd)/default.qcow"}
RELEASE=${RELEASE:-"sid"}
MIRROR=${MIRROR:-"http://ftp.fr.debian.org/debian"}
HNAME=${HNAME:-"defaulthost"}
VLAN=${VLAN:-"10.0.0"}
LIP=${LIP:-"10"}
MIP=${MIP:-"10"}
MEM=${MEM:-"524288"}
PASS=${PASS:-"root"}
CRIVERS="1.0.0-beta.1"
args.declare FILE    -f --file      Vals NoOption NotMandatory "The image file		(DEFAULT: $FILE)"
args.declare DISK    -d --disk      Vals NoOption NotMandatory "The nbd device to use	(DEFAULT: $DISK)"
args.declare MP      -m --montpoint Vals NoOption NotMandatory "Mount the image to		(DEFAULT: $MP)"
args.declare RELEASE -r --release   Vals NoOption NotMandatory "Debian release to use	(DEFAULT: $RELEASE)"
args.declare MIRROR  -M --mirror    Vals NoOption NotMandatory "Debian mirror		(DEFAULT: $MIRROR)"
args.declare MEM     -E --mem       Vals NoOption NotMandatory "VM memory			(DEFAULT: $MEM)"
args.declare HNAME   -H --hostname  Vals NoOption NotMandatory "Hostname			(DEFAULT: $HNAME)"
args.declare PASS    -p --password  Vals NoOption NotMandatory "root password 		(DEFAULT: $PASS)"
args.declare VLAN    -v --vlan      Vals NoOption NotMandatory "3 first numbers of the vlan network		  (DEFAULT: $VLAN)"
args.declare LIP     -i --last-ip   Vals NoOption NotMandatory "last ip number for that vm in the vlan private (DEFAULT: $LIP)"
args.option.declare TMPLT   -t --template	NotMandatory Y "Template to use for the initial configuration of the host"
templates.list() {
	local f i
	for i in "$TEMPLATE_DIR"/*sh;do 
		f=${i##*/};echo ${f%.sh}
	done
}
templates.load() {
	[ ! -f "${TEMPLATE_DIR}/${1}.sh" ] && return 1
	. "${TEMPLATE_DIR}/${1}.sh"
	return 0
}
for tmp in $(templates.list);do 
	args.option TMPLT "$tmp" "$(awk '/#@DESC@/{gsub("#@DESC@","");print}' <$TEMPLATE_DIR/${tmp}.sh)"
done
args.callback TMPLT templates.load

is.root() {
	[ $(id -u) -eq 0 ]
}
precheck.root() {
	if ! is.root;then
		out.error "> You have to be *root* to run this <"
		return 1
	fi
}

backup() {
	F="${1}.$(log.stamp)"
	find $(dirname $1) -maxdepth 1 -name "$(basename $1).20*" -mtime +10 -exec rm -f {} \; >/dev/null
	cp "${1}" "$F"
	echo $F
}

uninstall.netrem.precheck() {	precheck.root; }
uninstall.netrem() {
	virsh net-list|awk 'BEGIN{R=1}$1=="private"&&$2=="active"{R=0}END{exit R}' && virsh net-destroy private
	virsh net-info private >/dev/null 2>&1 || return 0 && virsh net-undefine private 
}
uninstall() {
	task.add uninstall.netrem "Undefine the private network"
}
act.add uninstall "Cleanup the configuration"
setup.install.precheck() {	precheck.root; }
setup.install() {
	apt-get install -y bridge-utils qemu-kvm libvirt-clients libvirt-daemon-system debianutils file qemu-utils debootstrap grub2-common curl libxml-xpath-perl
}
setup.netdef.precheck() {	precheck.root; }
setup.netdef() {
	local F=$(tempfile) R=0
	virsh net-info private >/dev/null 2>&1 && return 0
	cat >$F <<ENDXML
<network>
  <name>private</name>
  <forward dev='eth0' mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
    <interface dev='eth0'/>
  </forward>
  <bridge name='br0' stp='on' delay='0'/>
  <domain name='private'/>
  <ip address='${VLAN}.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='${VLAN}.100' end='${VLAN}.254'/>
    </dhcp>
  </ip>
</network>
ENDXML
	virsh net-define $F
	R=$?
	rm $F
	return $R
}
setup.netdef.verify() {
	if ! virsh net-info private >/dev/null 2>&1 ;then
		out.error "The private network is not defined"
		return 1
	fi
	task.verify 
}
setup.netconf.precheck() {	precheck.root; }
setup.netconf() {
	virsh net-list|awk 'BEGIN{R=1}$1=="private"&&$2=="active"{R=0}END{exit R}' || virsh net-start private
	virsh net-list|awk 'BEGIN{R=1}$1=="private"&&$3=="yes"{R=0}END{exit R}' || virsh net-autostart private
}
setup.netconf.verify() {
	if ! virsh net-list|awk 'BEGIN{R=1}$1=="private"&&$3=="yes"{R=0}END{exit R}' ;then
		out.error "The private network is not set to autostart"
		return 1
	fi
	if ! virsh net-list|awk 'BEGIN{R=1}$1=="private"&&$2=="active"{R=0}END{exit R}' ;then
		out.error "The private network is not started"
		return 1
	fi
	task.verify 
}
setup.makekey.precheck() {	precheck.root; }
setup.makekey() {
	[ -f "$HOME/.ssh/id_rsa.pub" ] && return 0
	echo -e "\n\n\n" |ssh-keygen
}
setup.makekey.verify() {
	if [ ! -f "$HOME/.ssh/id_rsa.pub" ];then
		out.error "The key failed to create somehow"
		return 1
	fi
	task.verify 
}

setup() {
	task.add setup.install "Install base packages for the host"
	task.add setup.netdef  "Create the private network"
	task.add setup.netconf "Configure the private network"
	task.add setup.makekey "Create a ssh public key if needed"
}
act.add setup "Setup the host system"

create.loadnbd.precheck() {	precheck.root; }
create.loadnbd() {
	lsmod|awk -vR=1 '$1=="nbd"{R=$3}END{exit R}' && rmmod nbd
	lsmod|awk -vR=1 '$1=="nbd"{R=$3}END{exit R}' && return 0
	modprobe nbd nbds_max=2 max_part=10
}
create.file() {
	[ -f "$FILE" ] && file "$FILE"|awk 'BEGIN{R=1}/QEMU QCOW/{R=0}END{exit R}' && return 0
	qemu-img create -f qcow2 "$FILE" 10G
	sync
	sleep 2
	sync
}
create.filenbd() {
	if [ ! -f "$FILE" ] || file "$FILE"|awk 'BEGIN{R=0}/QEMU QCOW/{R=1}END{exit R}';then
		out.error "$FILE is not a qcow file"
		return 1
	fi
	if file "$DISK"|awk 'BEGIN{R=0}/block special \(43/{R=1}END{exit R}';then
		out.error "$DISK is not an nbd block device"
		return 2
	fi
	fuser "$DISK" >/dev/null 2>&1 && return 0
	#blockdev --flushbufs "$DISK"
	qemu-nbd -n --fork -c "$DISK" "$FILE" &
}
create.partition.precheck() {	precheck.root; }
create.partition() {
	echo ';'|sfdisk -q -f "$DISK"
	blockdev --flushbufs "$DISK"
	sync
}
create.mkfs.precheck() {	precheck.root; }
create.mkfs() {
	mkfs.ext4 -qDF -E nodiscard "${DISK}p1"
	blockdev --flushbufs "$DISK"
	sync
}
create.mount.precheck() {	precheck.root; }
create.mount() {
	mkdir -p "$MP"
	mount "${DISK}p1" "$MP"
}
create.bootstrap() {
	debootstrap "--include=vim,openssh-server,acpid,linux-image-amd64,grub-pc,net-tools$1" "$RELEASE" "$MP" "$MIRROR"
}
create.config() {
	echo "$HNAME">"$MP/etc/hostname"
	echo "/dev/vda1 / ext4 errors=remount-ro 0 1">"$MP/etc/fstab"
	local B=$(backup /etc/hosts)
	sed "/$HNAME/d" <$B >/etc/hosts
	echo "${VLAN}.$LIP 	$HNAME">>/etc/hosts
	cat <<EOF > "$MP/etc/hosts"
127.0.0.1       localhost
# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
	grep "${VLAN}" /etc/hosts>>"$MP/etc/hosts"
	cat <<EOF > "$MP/etc/network/interfaces"
auto lo
iface lo inet loopback

auto enp0s3
iface enp0s3 inet static
	address ${VLAN}.$LIP
	netmask 255.255.255.0
	gateway ${VLAN}.1
EOF
	cat <<EOF > "$MP/etc/resolv.conf"
domain private
search private
nameserver ${VLAN}.1
EOF
}
create.mountsub() {
	if mount|awk -vR=0 "-vP=$MP" '$3==P"/dev"{R=1}END{exit R}' && ! mount --bind /dev/ "$MP/dev";then
		out.error "Failed to bind-mount /dev"
		return 1
	fi
	if mount|awk -vR=0 "-vP=$MP" '$3==P"/proc"{R=1}END{exit R}' && ! chroot "$MP" mount -t proc none /proc;then
		out.error "Failed to mount /proc"
		return 2
	fi
	if mount|awk -vR=0 "-vP=$MP" '$3==P"/sys"{R=1}END{exit R}' && ! chroot "$MP" mount -t sysfs none /sys;then
		out.error "Failed to mount /sys"
		return 3
	fi
	return 0
}
create.passwd() {
	echo -e "$PASS\n$PASS"|chroot "$MP" passwd 2>&1
	mkdir -p "$MP/root/.ssh"
	chmod 700 "$MP/root/.ssh"
	cp "$HOME/.ssh/id_rsa.pub" "$MP/root/.ssh/authorized_keys"
}
create.install() {
	if ! chroot "$MP" grub-install "$DISK" 2>&1;then
		out.error "Failed to install grub"
		return 1
	fi
	if ! chroot "$MP" update-grub 2>&1;then
		out.error "Failed to update grub"
		return 2
	fi
	sed -i "s|${DISK}p1|/dev/vda1|g" "$MP/boot/grub/grub.cfg"
}
create.loadxml() {
	local F=$(tempfile) R=0
	virsh dumpxml "$HNAME" >/dev/null 2>&1 && return 0
	cat >$F <<ENDXML
<domain type='kvm'>
  <name>$HNAME</name>
  <memory unit='KiB'>$MEM</memory>
  <vcpu placement='static'>1</vcpu>
  <os>
    <type arch='x86_64' machine='pc-i440fx-2.11'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <vmport state='off'/>
  </features>
  <cpu mode='custom' match='exact' check='partial'>
    <model fallback='allow'>Skylake-Client</model>
  </cpu>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='$FILE'/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </disk>
    <controller type='usb' index='0' model='ich9-ehci1'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x7'/>
    </controller>
    <controller type='usb' index='0' model='ich9-uhci1'>
      <master startport='0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0' multifunction='on'/>
    </controller>
    <controller type='usb' index='0' model='ich9-uhci2'>
      <master startport='2'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x1'/>
    </controller>
    <controller type='usb' index='0' model='ich9-uhci3'>
      <master startport='4'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x2'/>
    </controller>
    <controller type='pci' index='0' model='pci-root'/>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </controller>
    <interface type='network'>
      <source network='private'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <serial type='pty'>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='1'/>
    </channel>
    <channel type='spicevmc'>
      <target type='virtio' name='com.redhat.spice.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='2'/>
    </channel>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <graphics type='spice' autoport='yes'>
      <listen type='address'/>
      <image compression='off'/>
    </graphics>
    <video>
      <model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1' primary='yes'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/>
    </memballoon>
    <rng model='virtio'>
      <backend model='random'>/dev/urandom</backend>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>
    </rng>
  </devices>
</domain>
ENDXML
	virsh define $F
	R=$?
	#rm $F
	echo $F
	return $R
}

create.umount() {
	mount|awk -vR=0 "-vP=$MP" '$3==P"/dev"{R=1}END{exit R}' || umount "$MP/dev"
	mount|awk -vR=0 "-vP=$MP" '$3==P"/proc"{R=1}END{exit R}' || umount "$MP/proc"
	mount|awk -vR=0 "-vP=$MP" '$3==P"/sys"{R=1}END{exit R}' || umount "$MP/sys"
	mount|awk -vR=0 "-vP=$MP" '$3==P{R=1}END{exit R}' || umount "${DISK}p1"
}
create.disconnect() {
	fuser "$DISK" >/dev/null 2>&1 || return 0
	blockdev --flushbufs "$DISK"
	qemu-nbd -d "$DISK"
}
list.load() {
	task.add create.loadnbd		"Load the nbd kernel module"
	task.add create.filenbd		"Connect the file to the nbd device"
	task.add create.mount		"Mount the filesystem"
	task.add create.mountsub	"Mount the virtual filesystems for the chroot"
}
list.create() {
	task.add create.loadnbd		"Load the nbd kernel module"
	task.add create.file		"Create the file"
	task.add create.filenbd		"Connect the file to the nbd device"
	task.add create.partition	"Partition the file"
	task.add create.mkfs		"Format the filesystem"
	task.add create.mount		"Mount the filesystem"
}
list.unload() {
	task.add create.umount		"unmount filesystems"
	task.add create.disconnect	"Disconnect the nbd device"
	task.add create.loadxml		"Insert the VM in the libvirt configuration"
}
create() {
	list.create
	if is.function template.bootstrap;then
	task.add template.bootstrap	"Bootstrap the debian installation with template packages"
	else
	task.add create.bootstrap	"Bootstrap the debian installation"
	fi
	task.add create.config		"Configure the installation"
	task.add create.mountsub	"Mount the virtual filesystems for the chroot"
	task.add create.passwd		"Set the root password"
	is.function template.config && template.config create
	task.add create.install		"Install grub"
	list.unload
}
act.add create "Create a debian image"

config() {
	list.load
	task.add create.passwd		"Set the root password"
	task.add create.config		"Configure the installation"
	is.function template.config && template.config config
	list.unload
}
act.add config "Configure an image"

act.script "$@"
